plugins {
    id 'maven-publish'
    id 'io.freefair.lombok'
    id 'pl.allegro.tech.build.axion-release'
}

scmVersion {
    useHighestVersion = true
    versionIncrementer { context -> return context.currentVersion }
    versionCreator("versionWithBranch")
    repository { type = 'git' }
    tag { prefix = '' }
    nextVersion { suffix = 'SNAPSHOT' }
}

group = 'com.qa.atlibs'
version = scmVersion.version

subprojects {
    if (project.name != 'qa-lib-bom') {
        apply plugin: 'java-library'
        apply plugin: 'maven-publish'
        apply plugin: 'io.freefair.lombok'

        project.version = scmVersion.version

        dependencies {
            implementation(platform(project(':qa-lib-bom')))
        }

        configurations.configureEach {
            resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        }

        java {
            withJavadocJar()
            withSourcesJar()
            sourceCompatibility = JavaVersion.VERSION_21
            targetCompatibility = JavaVersion.VERSION_21
        }

        tasks.withType(JavaCompile).configureEach {
            options.encoding = 'UTF-8'
            options.release = 21
            options.deprecation = true
            options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
            options.compilerArgs.add("-parameters")
        }

        publishing {
            publications {
                mavenJava(MavenPublication) {
                    pom {
                        groupId = rootProject.group
                        version = rootProject.version
                        name = project.name
                        artifactId = project.name
                    }
                    from components.java
                }
            }
            repositories {
                maven {
                    name = "GitHubPackages"
                    url = "https://maven.pkg.github.com/${project.owner}/${project.name}"
                    credentials {
                        username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                        password = project.findProperty("gpr.token") ?: System.getenv("GITHUB_TOKEN")
                    }
                }
            }
        }
    }
}

static def executeCommandWithCheck(String command, String message) {
    def process = command.execute()
    process.waitFor()
    if (process.exitValue() != 0) {
        throw new RuntimeException(message)
    }
}

tasks.register('createReleaseBranchWithTag') {
    doLast {
        def version = scmVersion.version
        def versionParts = version.split('\\.')
        def majorMinorVersion = "${versionParts[0]}.${versionParts[1]}"
        def releaseBranchName = "release/${majorMinorVersion}"
        def branchExists = "git branch --list ${releaseBranchName}".execute().text.trim()
        if (branchExists) {
            println("Branch ${releaseBranchName} already exists.")
        } else {
            println("Creating branch ${releaseBranchName}...")
            executeCommandWithCheck("git branch ${releaseBranchName}", "Failed to create branch")
            executeCommandWithCheck("git add -A", "Failed to add changes")
            def changesExist = "git diff --cached --quiet".execute().waitFor() == 0
            if (changesExist) {
                executeCommandWithCheck("git commit -m 'Creating release branch ${releaseBranchName}'",
                        "Failed to commit changes")
            } else {
                println("No changes to commit.")
            }
            executeCommandWithCheck("git push -o ci.skip -u origin ${releaseBranchName}", "Failed to push branch")
        }
    }
}


wrapper {
    gradleVersion = libs.versions.gradle.wrapper.get()
}